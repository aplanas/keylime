"""
SPDX-License-Identifier: Apache-2.0
Copyright 2017 Massachusetts Institute of Technology.
"""
import configparser
import os
import os.path

from keylime import json

# Config files can be merged together, reading from the system to the
# user.
CONFIG_FILES = [
    "/usr/etc/keylime.conf",
    "/etc/keylime.conf",
    os.path.expanduser("~/.config/keylime.conf"),
]
if "KEYLIME_CONFIG" in os.environ:
    CONFIG_FILES.append(os.environ["KEYLIME_CONFIG"])


def environ_bool(env_name, default):
    val = os.getenv(env_name, "default").lower()
    if val in ["on", "true", "1"]:
        return True
    if val in ["off", "false", "0"]:
        return False
    if val == "default":
        return default
    raise ValueError(
        "Environment variable %s set to invalid value "
        "%s (use either on/true/1 or off/false/0)" % (env_name, val)
    )


class Config(configparser.ConfigParser):
    # SET STUB_TPM TO True TO ALLOW ALL TPM Operations to be stubbed
    # out
    #
    # If STUB_TPM=True, TPM_CANNED_VALUES_PATH file must be provided
    # (canned inputs)
    #
    # Canned input values can be generated by running with
    # STUB_TPM=False and specifying a TPM_CANNED_VALUES_PATH filename
    STUB_TPM = False
    TPM_CANNED_VALUES_PATH = None

    # SET TO TRUE TO STUB A VTPM
    STUB_VTPM = False
    # Force stub tpm if vtpm true
    if STUB_VTPM:
        STUB_TPM = True

    # Enable TPM benchmarking (output timing data to given file)
    TPM_BENCHMARK_PATH = None

    # Set to False to enable keylime to run from the CWD and not
    # require root access.  For testing purposes only all processes
    # will log to the CWD in keylime-all.log
    REQUIRE_ROOT = environ_bool("KEYLIME_REQUIRE_ROOT", True)

    # Enable printing of keys and other info for debug purposes
    INSECURE_DEBUG = False

    # Allow the emuatlor to not have an ekcert even if check ekcert is
    # true
    DISABLE_EK_CERT_CHECK_EMULATOR = False

    # Stub out IMA functionality
    STUB_IMA = False

    if STUB_TPM:
        STUB_IMA = True

    # Allow testing mode
    TEST_MODE = os.getenv("KEYLIME_TEST", "False")
    if TEST_MODE.upper() == "TRUE":
        print(
            "WARNING: running keylime in testing mode.\n"
            "keylime will not run as root and ekcert checking "
            "for the TPM emulator is disabled"
        )
        REQUIRE_ROOT = False
        DISABLE_EK_CERT_CHECK_EMULATOR = True

    # Whether to use tpmfs or not
    MOUNT_SECURE = True

    # Load in JSON canned values if we're in stub mode (and JSON file
    # given)
    TPM_CANNED_VALUES = None
    if STUB_TPM and TPM_CANNED_VALUES_PATH is not None:
        with open(TPM_CANNED_VALUES_PATH, "rb") as can:
            print(
                "WARNING: using canned values in stub mode from file '%s'"
                % (TPM_CANNED_VALUES_PATH)
            )
            # Read in JSON and strip trailing extraneous commas
            jsonInTxt = can.read().rstrip(",\r\n")
            # Saved JSON is missing surrounding braces, so add them
            # here
            TPM_CANNED_VALUES = json.loads(f"{{{jsonInTxt}}}")
    elif STUB_TPM:
        raise Exception(
            "STUB_TPM=True but required TPM_CANNED_VALUES_PATH not provided!"
        )

    if not REQUIRE_ROOT:
        MOUNT_SECURE = False

    if not REQUIRE_ROOT:
        print("WARNING: running without root access")


    if not REQUIRE_ROOT:
        DEFAULT_WORK_DIR = os.path.abspath(".")
    else:
        DEFAULT_WORK_DIR = "/var/lib/keylime"
    WORK_DIR = os.getenv("KEYLIME_DIR", DEFAULT_WORK_DIR)

    CA_WORK_DIR = "%s/ca/" % WORK_DIR

    if STUB_IMA:
        IMA_ML = "../scripts/ima/ascii_runtime_measurements"
    else:
        IMA_ML = "/sys/kernel/security/ima/ascii_runtime_measurements"

    IMA_PCR = 10

    # Measured boot addons
    # PCRs 0-7: BIOS & UEFI
    # PCRs 8-9: bootloader (grub)
    # PCR 14: MokList, MokListX, and MokSBState
    MEASUREDBOOT_PCRS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15]
    MEASUREDBOOT_ML = "/sys/kernel/security/tpm0/binary_bios_measurements"
    MEASUREDBOOT_IMPORTS = (
        get_config().get("cloud_verifier", "measured_boot_imports", fallback="").split(",")
    )
    MEASUREDBOOT_POLICYNAME = get_config().get(
        "cloud_verifier", "measured_boot_policy_name", fallback="accept-all"
    )

    # Formerly "/usr/lib/x86_64-linux-gnu/libefivar.so"
    LIBEFIVAR = "libefivar.so"

    # This is where data will be bound to a quote, MUST BE RESETABLE!
    TPM_DATA_PCR = 16

    # The size of the bootstrap key for AES-GCM 256bit
    BOOTSTRAP_KEY_SIZE = 32

    CRL_PORT = 38080

    def __init__(self):
        super().__init__()
        self.loaded = False
        self.files = []

    def load(self):
        """Read configuration files and merge them together."""
        if not self.loaded:
            # TODO - use logger and be sure that all variables have a
            # propper default, and the sections are initialized
            if not any(os.path.exists(c) for c in CONFIG_FILES):
                print(
                    f"Config file not found in {CONFIG_FILES}. Please set "
                    f"environment variable KEYLIME_CONFIG or see {__file__} "
                    "for more details."
                )

            # Validate that at least one config file is present
            self.config = configparser.ConfigParser()
            self.files = self.config.read(CONFIG_FILES)
        self.loaded = True

    @property
    def CA_IMPL(self):
        if not self.load():
            raise ValueError("Configuration not loaded")
        # Choose between cfssl or openssl for creating CA certificates
        return self.get("general", "ca_implementation", fallback="openssl")
